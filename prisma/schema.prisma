generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Post {
  id                    String               @id @default(cuid())
  title                 String?
  authorId              String?
  breakdown             String?              @db.Text
  businessModel         String?              @db.Text
  businessModelStrength Float?
  demandDrivers         String?              @db.Text
  demandDriversStrength Float?
  diagramUrl            String?              @db.Text
  downside              String?              @db.Text
  horizon               String?              @db.Text
  mainImageUrl          String?
  metrics               String?              @db.Text
  oneYearHorizon        String?              @db.Text
  ourTake               String?              @db.Text
  publishedAt           DateTime?
  shortDescription      String?              @db.Text
  slug                  String?
  threeMonthHorizon     String?              @db.Text
  tokenStrength         Float?
  tokenUtility          String?              @db.Text
  tokenUtilityStrength  Float?
  upside                String?              @db.Text
  valueCapture          String?              @db.Text
  valueCaptureStrength  Float?
  valueCreation         String?              @db.Text
  valueCreationStrength Float?
  parent                String?              @db.Text
  problemSolution       String?              @db.Text
  strongPoints          String?              @db.Text
  weakPoints            String?              @db.Text
  authorClerkId         String?
  calculationId         String?
  status                String?
  ticker                String?
  isOfficial            Boolean              @default(false)
  postType              String?              @db.Text
  author                User?                @relation(fields: [authorId], references: [id])
  categories            Category[]
  tags                  Tag[]
  protocolTimeLine      ProtocolTimeLine[]
  ProtocolResources     ProtocolResources[]
  Comments              Comments[]
  UserStrengthRating    UserStrengthRating[]
  DesignElement         DesignElement[]
  Mechanism             Mechanism[]
  PostUser              PostUser[]
  PostAuthor            PostAuthor[]
  Calculation           Calculation?

  @@index([authorId])
}

model Category {
  value String  @id
  label String?
  posts Post[]
}

model Tag {
  value String  @id
  label String?
  posts Post[]
}

model Subscriptions {
  authorClerkId         String    @id
  stripeCustomerId      String    @unique
  tier                  String
  exampleSectionCounter Int?
  exampleViewStart      DateTime?
}

model ProtocolTimeLine {
  id          String    @id @default(cuid())
  title       String?
  date        DateTime?
  description String?
  postId      String
  post        Post      @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@index([postId])
}

model ProtocolResources {
  id       String   @id @default(cuid())
  title    String?
  url      String?
  internal Boolean?
  postId   String
  post     Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@index([postId])
}

model Comments {
  id            String    @id @default(cuid())
  comment       String?   @db.Text
  authorClerkId String?
  postId        String
  date          DateTime?
  post          Post      @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@index([postId])
}

model UserStrengthRating {
  id                      String  @id @default(cuid())
  authorClerkId           String?
  postId                  String
  userReviewUtility       String? @db.Text
  userReviewDemandDriver  String? @db.Text
  userReviewValueCreation String? @db.Text
  userReviewValueCapture  String? @db.Text
  userReviewBusinessModel String? @db.Text
  tokenUtilityStrength    Float?
  businessModelStrength   Float?
  valueCreationStrength   Float?
  valueCaptureStrength    Float?
  demandDriversStrength   Float?
  post                    Post    @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Calculation {
  id              String            @id @default(cuid())
  title           String?
  authorClerkId   String?
  months          Int?
  totalSupply     Float?
  startDate       DateTime?
  postId          String?           @unique
  CalculationRows CalculationRows[]
  post            Post?             @relation(fields: [postId], references: [id])
  Mechanism       Mechanism[]

  @@index([postId])
}

model CalculationRows {
  id                        String      @id @default(cuid())
  category                  String?
  lockupPeriod              Float?
  unlockPeriod              Float?
  percentageAllocation      Float?
  color                     String?
  calculationId             String
  emissionReductionPerEpoch Float?
  epochDurationInSeconds    Float?
  initialEmissionPerSecond  Float?
  isEpochDistro             Boolean     @default(false)
  calculation               Calculation @relation(fields: [calculationId], references: [id], onDelete: Cascade)

  @@index([calculationId])
}

model DesignElement {
  id                  String        @id @default(cuid())
  content             String?       @db.Text
  designPhasesId      String?
  postId              String
  designElementStatus String?       @db.Text
  Post                Post          @relation(fields: [postId], references: [id], onDelete: Cascade)
  designPhase         DesignPhases? @relation(fields: [designPhasesId], references: [id])

  @@index([postId])
  @@index([designPhasesId])
}

model DesignPhases {
  id              String          @id @default(cuid())
  parentPhaseId   Int?
  Resources       String?         @db.Text
  phaseId         Int?            @unique
  name            String?
  phaseOrder      Int?
  postDataElement String?
  isReport        Boolean?        @default(false)
  DesignElement   DesignElement[]

  @@index([parentPhaseId])
}

model CalculationTimeSeries {
  id                String    @id @default(cuid())
  months            Int?
  tokens            Float?
  mechanismId       String
  calculationRowsId String?
  phase             Int?
  Mechanism         Mechanism @relation(fields: [mechanismId], references: [id], onDelete: Cascade)

  @@index([mechanismId])
}

enum supply_Demand_Type {
supplyInternal
supplyExternal
demandUtility
demandMechanism
}

model Mechanism {
  id                        String                  @id @default(cuid())
  name                      String?
  summary                   String?                 @db.Text
  details                   String?                 @db.Text
  supplyDemandType          supply_Demand_Type      @default(supplyInternal)
  isSink                    Boolean?
  token                     String?
  postId                    String?
  isTemplate                Boolean?                @default(false)
  calculationId             String?
  category                  String?
  color                     String?
  emissionReductionPerEpoch Float?
  epochDurationInSeconds    Float?
  initialEmissionPerSecond  Float?
  isEpochDistro             Boolean                 @default(false)
  lockupPeriod              Float?
  percentageAllocation      Float?
  unlockPeriod              Float?
  percentageUnlockTGE       Float?
  post                      Post?                   @relation(fields: [postId], references: [id], onDelete: Cascade)
  PostUser                  PostUser[]
  calculation               Calculation?            @relation(fields: [calculationId], references: [id], onDelete: Cascade)
  CalculationTimeSeries     CalculationTimeSeries[]

  @@index([postId])
  @@index([calculationId])
}

model PostUser {
  id        String      @id @default(cuid())
  name      String?
  role      String?     @db.Text
  postId    String
  Post      Post        @relation(fields: [postId], references: [id], onDelete: Cascade)
  Mechanism Mechanism[]

  @@index([postId])
}

model PostAuthor {
  id          String  @id @default(cuid())
  postId      String
  clerkUserId String
  role        String? @db.Text
  Post        Post    @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@index([postId])
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id                    String                  @id @default(cuid())
  name                  String?
  email                 String?                 @unique
  emailVerified         DateTime?
  image                 String?
  wallet                String?                 @unique
  role                  String?
  slug                  String?                 @unique
  twitter               String?
  website               String?
  posts                 Post[]
  accounts              Account[]
  sessions              Session[]
  Payout                Payout[]
  Vote                  Vote[]
  ContentAuthor         ContentAuthor[]
  TeamProposal          TeamsProposal[]
  RewardRoundTeamMember RewardRoundTeamMember[]
  MemberVote            MemberVote[]
}

model RewardRound {
  id            String          @id @default(cuid())
  monthYear     String?         @unique
  budget        Int?
  contentPoints Int?
  isOpen        Boolean         @default(false)
  phase         String?         @default("preparation")
  Vote          Vote[]
  Payout        Payout[]
  Content       Content[]
  TeamValueAdd  TeamValueAdd[]
  TeamsProposal TeamsProposal[]
}

model Payout {
  id                String      @id @default(cuid())
  userId            String      @map("user_id")
  rewardRoundId     String
  pointsReceived    Int?
  contentCashReward Float?
  ownershipReward   Float?
  teamCashReward    Float?
  user              User        @relation(fields: [userId], references: [id])
  rewardRound       RewardRound @relation(fields: [rewardRoundId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([rewardRoundId])
}

model Content {
  id              String          @id @default(cuid())
  description     String?
  url             String?
  pointsVote      Int?            @default(0)
  createdAt       String?
  contentAuthorId String?
  createdOn       DateTime?
  rewardRoundId   String?         @default(cuid())
  type            String?
  Vote            Vote[]
  ContentAuthor   ContentAuthor[]
  rewardRound     RewardRound?    @relation(fields: [rewardRoundId], references: [id], onDelete: Cascade)

  @@index([rewardRoundId])
}

model Vote {
  id            String      @id @default(cuid())
  rewardRoundId String
  userId        String      @map("user_id")
  pointsSpent   Int?
  contentId     String
  rewardRound   RewardRound @relation(fields: [rewardRoundId], references: [id])
  user          User        @relation(fields: [userId], references: [id])
  content       Content     @relation(fields: [contentId], references: [id], onDelete: Cascade)

  @@index([rewardRoundId])
  @@index([userId])
  @@index([contentId])
}

model ContentAuthor {
  id        String  @id @default(cuid())
  userId    String  @map("user_id")
  contentId String
  user      User    @relation(fields: [userId], references: [id])
  content   Content @relation(fields: [contentId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([contentId])
}

model Team {
  id           String         @id @default(cuid())
  name         String
  TeamValueAdd TeamValueAdd[]
}

model TeamValueAdd {
  id                    String                  @id @default(cuid())
  teamId                String?                 @default(cuid())
  rewardRoundId         String?                 @default(cuid())
  valueAdd              String                  @db.VarChar(1000)
  allocation            Int?
  cashAllocation        Float?
  team                  Team?                   @relation(fields: [teamId], references: [id], onDelete: Cascade)
  rewardRound           RewardRound?            @relation(fields: [rewardRoundId], references: [id], onDelete: Cascade)
  TeamProposal          TeamsProposal[]
  RewardRoundTeamMember RewardRoundTeamMember[]
  MemberVote            MemberVote[]

  @@index([teamId])
  @@index([rewardRoundId])
}

model TeamsProposal {
  id             String        @id @default(cuid())
  userId         String        @map("user_id")
  reason         String        @db.VarChar(1000)
  rewardRoundId  String?       @default(cuid())
  active         Boolean       @default(false)
  allocation     Int?
  teamValueAddId String?       @default(cuid())
  proposalNumber Int?
  submittedOn    DateTime?
  user           User          @relation(fields: [userId], references: [id])
  rewardRound    RewardRound?  @relation(fields: [rewardRoundId], references: [id], onDelete: Cascade)
  teamValueAdd   TeamValueAdd? @relation(fields: [teamValueAddId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([rewardRoundId])
  @@index([teamValueAddId])
}

model RewardRoundTeamMember {
  id               String        @id @default(cuid())
  userId           String        @map("user_id")
  teamValueAddId   String?       @default(cuid())
  valueAdd         String?       @db.VarChar(1000)
  selected         Boolean       @default(false)
  allocationPoints Int?
  user             User          @relation(fields: [userId], references: [id])
  teamValueAdd     TeamValueAdd? @relation(fields: [teamValueAddId], references: [id], onDelete: Cascade)
  MemberVote       MemberVote[]

  @@index([userId])
  @@index([teamValueAddId])
}

model MemberVote {
  id                      String                 @id @default(cuid())
  userId                  String                 @map("user_id")
  pointsSpent             Int?
  teamValueAddId          String?                @default(cuid())
  RewardRoundTeamMemberId String?                @default(cuid())
  user                    User                   @relation(fields: [userId], references: [id])
  teamValueAdd            TeamValueAdd?          @relation(fields: [teamValueAddId], references: [id], onDelete: Cascade)
  RewardRoundTeamMember   RewardRoundTeamMember? @relation(fields: [RewardRoundTeamMemberId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([teamValueAddId])
  @@index([RewardRoundTeamMemberId])
}

model CategoryToPost {
  A String
  B String

  @@unique([A, B], map: "_CategoryToPost_AB_unique")
  @@index([B], map: "_CategoryToPost_B_index")
  @@map("_CategoryToPost")
}

model MechanismToPostUser {
  A String
  B String

  @@unique([A, B], map: "_MechanismToPostUser_AB_unique")
  @@index([B], map: "_MechanismToPostUser_B_index")
  @@map("_MechanismToPostUser")
}

model PostToTag {
  A String
  B String

  @@unique([A, B], map: "_PostToTag_AB_unique")
  @@index([B], map: "_PostToTag_B_index")
  @@map("_PostToTag")
}
